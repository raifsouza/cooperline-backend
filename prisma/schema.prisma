// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // ATENÇÃO: HARDCODED APENAS PARA SOLUCIONAR SEU PROBLEMA COM O CLI DO PRISMA.
  // EM PRODUÇÃO, USARÍAMOS: url = env("DATABASE_URL")
  url = "mysql://root:@localhost:3306/copperline"
}

model User { // Ou o nome que preferir para o modelo
  id            Int     @id @default(autoincrement())
  nome          String
  senha         String
  nivel_acesso  Int? // Ou Int se sempre tiver um nível de acesso

  @@map("usuarios") // Ou o nome real da sua tabela de usuários no DB (e.g., 'user_accounts')
}

// NOVO MODELO: Para os dados da planilha de produtos (COM COLUNA 'CODIGO')
model ProductEntry {
  id                 Int       @id @default(autoincrement()) // ID auto-incrementável para produtos
  codigo             String    @unique @map("codigo")        // NOVA COLUNA: Código, assumindo que é único
  nomeProduto        String    @map("nome_produto")
  tamanhoPadrao      String    @map("tamanho_padrao")
  designacao         String    @map("designacao")
  tensao             String    @map("tensao")
  massaBrutaKg100m   Float     @map("massa_bruta_kg_100m") // Usar Float para números decimais
  normaAplicada      String    @map("norma_aplicada")
  composicao         String    @map("composicao")
  numeroRegistro     String    @map("numero_registro")
  codBarras          String    @unique @map("cod_barras") // Assumindo que código de barras é único
  pedidoOc           String?   @map("pedido_oc") // Opcional, se nem sempre tiver
  retalho            String?   @map("retalho") // Opcional, se nem sempre tiver
  massaLiquidaKg100m Float     @map("massa_liquida_kg_100m") // Usar Float

  @@map("product_entries") // Nome da tabela no banco de dados
}

model LabelEntry {
  id            Int     @id @default(autoincrement())
  fileName      String  @unique @map("file_name") // Nome do arquivo .prn, usado como nome da etiqueta
  originalContent String  @db.Text @map("original_content") // Conteúdo original do arquivo .prn
  designacao    String?
  tensao        String?
  dataFab       String? @map("data_fab")
  paisOrigem    String? @map("pais_origem")
  validade      String?
  lote          String?
  registro      String?
  barcode       String? // O valor do código de barras
  // Adicione outras colunas conforme necessário para campos editáveis
  // Exemplo:
  // customField1 String?
  // customField2 String?

  @@map("label_entries") // Nome da tabela no banco de dados
}


model PrintHistory {
  id             Int      @id @default(autoincrement())
  userId         String
  userName       String
  userMatricula  String?  // <-- TEM QUE ESTAR ASSIM
  timestamp      DateTime @default(now())
  printerName    String
  copies         Int
  labelName      String
  productName    String?
  zplContentSent String?
}